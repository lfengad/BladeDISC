import subprocess
import re, os


D0 = 2048
D1 = 2048
D2 = 4096

GT = " 3.532798  3.532798  3.532798  3.532798  3.532798  3.532798  3.532798  3.532798  3.532798  3.532798  3.532798  3.532798  3.532798  3.532798  3.532798  3.532798  3.532798  3.532798  3.532798  3.532798  3.532798  3.532798  3.532798  3.532798  3.532798 "

GT = " 2.457598  2.457598  2.457598  2.457598  2.457598  2.457598  2.457598  2.457598  2.457598  2.457598  2.457598  2.457598  2.457598  2.457598  2.457598  2.457598  2.457598  2.457598  2.457598  2.457598  2.457598  2.457598  2.457598  2.457598  2.457598  2.457598  2.457598  2.457598  2.457598  2.457598  2.457598  2.457598 "

GT = " 2.457581  2.457581  2.457581  2.457581  2.457581  2.457581  2.457581  2.457581  2.457581  2.457581  2.457581  2.457581  2.457581  2.457581  2.457581  2.457581  2.457581  2.457581  2.457581  2.457581  2.457581  2.457581  2.457581  2.457581  2.457581  2.457581  2.457581  2.457581  2.457581  2.457581  2.457581  2.457581 "

GT = " 0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200  0.307200 "

GTT =  204.7991

DType = 'float'

def run(Tdim, Tfac, Bfac, Ldim):
    name = "{}_{}_{}_{}".format(Tdim, Tfac, Bfac, Ldim)
    name = "data/" + name
    # if not os.path.exists("{}.stats.csv".format(name)): 
    if True:
        cmd = "hipcc -o exec ../kernels.cu -I/opt/rocm/include -O3 -DD0={} -DD1={} -DD2={} -DLT={} -DLW={} -DLG={} -DLI={} -DTT={}".format(D0, D1, D2, Tdim, Tfac, Bfac, Ldim, DType)
        print(cmd)
        o = subprocess.check_output(cmd, shell=True)
        print(o)
        cmd = "rocprof --hip-trace -o {}.csv ./exec".format(name)
        print(cmd)
        o = subprocess.check_output(cmd, shell=True).decode("utf-8")
        print(o)
        o = re.findall(r"output: (.+)\n", o)
        print(o)
    with open("{}.stats.csv".format(name)) as f:
        lines = f.readlines()
        for l in lines:
            if "kernel" in l:
                t = l.rsplit(",",4)[-2]
                print(t)
    return o, t


#2    print(o)

def check_res(d):
    ds = d.strip().split("  ")
    print(ds)
    for d in ds:
        if (abs(float(d) - GTT) / max(float(d), GTT)) >= 0.001:
            return False
    return True
        

def exec():
    if os.path.exists("tune.log"):
        os.remove("tune.log")
    if os.path.exists("tune.res"):
        os.remove("tune.res")
    if os.path.exists("tune_sort.log"):
        os.remove("tune_sort.log")
    if not os.path.exists("data"):
        os.mkdir("data")
    dic = {}
    tdims = []
    if D0 < 256:
        t = D0
        while(t <= 1024):
            tdims.append(t)
            t *= 2
    else:
        tdims = [256, 512, 1024]


    for Tdim in tdims:
        for  Tfac in [8, 16, 32, 64]:
            for Bfac in [1]:# , 2, 4, 8, 16, 32, 64]:
                Bfac = int((D1 - 1) / Tfac + 1)
                for Ldim in [1, 2, 4, 8, 16, 32]:
                    try:
                        res, t = run(Tdim, Tfac, Bfac, Ldim)
                        # print(res, t)
                        if not check_res(res[0]):
                            print("error")    
                            continue
                        else:
                            print("right")  
                        Bdim = int(D0/(Tdim/Tfac)*Bfac/Ldim)
                        name = "{}_{}_{}_{}_{}".format(Tdim, Tfac, Bfac, Ldim, Bdim)
                        dic[name] = t
                        with open("tune.log", "a") as f:
                            f.write(name + " : " + t + "\n")
                        with open("tune.res", "a") as f:
                            f.write("{} : {}\n".format(name, res))
                    except Exception as e:
                        print(e)
                        pass
    new_dic = sorted(dic.items(), key=lambda item: float(item[1]))
    print(new_dic)
    with open("tune_sort.log", "a") as f:
        for name, t in new_dic:
            f.write(name + " : " + t + "\n")

if __name__ == "__main__":
    exec()
